name: Build/release

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-latest, ubuntu-22.04, windows-latest]
      fail-fast: false

    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
      shaosxarm: ${{ steps.calculate_macos_sha256.outputs.shaosxarm }}
      shaosxintel: ${{ steps.calculate_macos_sha256.outputs.shaosxintel }}
      shalinux: ${{ steps.calculate_linux_sha256.outputs.shalinux }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Add code signing dependencies
        if: runner.os == 'macOS'
        run: |
          echo "${{ secrets.APPLE_DEV_ID_APP }}" | base64 --decode -o ${{ runner.temp }}/AppleCSC.p12
          echo CSC_LINK=${{ runner.temp }}/AppleCSC.p12 >> $GITHUB_ENV
          echo CSC_KEY_PASSWORD=${{ secrets.APPLE_DEV_ID_APP_PASS }} >> $GITHUB_ENV
          echo "${{ secrets.APPLE_API_KEY }}" | base64 --decode -o ${{ runner.temp }}/AppStoreConnect.p8
          echo APPLE_API_KEY=${{ runner.temp }}/AppStoreConnect.p8 >> $GITHUB_ENV
          echo APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }} >> $GITHUB_ENV
          echo APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }} >> $GITHUB_ENV

      - name: Build/release Electron app
        timeout-minutes: 15
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install --ignore-scripts
          echo THINGIVERSE_CLIENT_ID=${{ secrets.THINGIVERSE_CLIENT_ID }} > .env
          npm run build
          npx electron-builder --publish always

      - name: Calculate version
        id: calculate_version
        shell: bash
        run: |
          # Extract version from the tag
          version=$(echo ${{ github.ref }} | sed 's|^refs/tags/v||')
          if [[ "$version" =~ \.[0-9]+(-.*)$ ]]; then
              echo "Version ends with '-*', skipping homebrew update."
              echo "version=" >> $GITHUB_OUTPUT
              exit 0
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      # Only run on macOS to calculate hashes and upload to artifact storage
      - name: Calculate macOS SHA256 hashes
        id: calculate_macos_sha256
        if: runner.os == 'macOS' && steps.calculate_version.outputs.version != ''
        shell: bash
        run: |
          # if file not found, exit with error
          if [ ! -f "dist/PubMan-${{ steps.calculate_version.outputs.version }}-arm64.dmg" ]; then
              echo "Error: dist/PubMan-${{ steps.calculate_version.outputs.version }}-arm64.dmg not found"
              exit 1
          fi
          if [ ! -f "dist/PubMan-${{ steps.calculate_version.outputs.version }}.dmg" ]; then
              echo "Error: dist/PubMan-${{ steps.calculate_version.outputs.version }}.dmg not found"
              exit 1
          fi
          echo "shaosxarm=$(shasum -a 256 dist/PubMan-${{ steps.calculate_version.outputs.version }}-arm64.dmg | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "shaosxintel=$(shasum -a 256 dist/PubMan-${{ steps.calculate_version.outputs.version }}.dmg | awk '{print $1}')" >> $GITHUB_OUTPUT

      # Only run on Linux to calculate Linux hash
      - name: Calculate Linux SHA256
        id: calculate_linux_sha256
        if: runner.os == 'Linux' && steps.calculate_version.outputs.version != ''
        shell: bash
        run: |
          # if file not found, exit with error
          if [ ! -f "dist/PubMan-${{ steps.calculate_version.outputs.version }}.AppImage" ]; then
              echo "Error: dist/PubMan-${{ steps.calculate_version.outputs.version }}.AppImage not found"
              exit 1
          fi
          echo "shalinux=$(shasum -a 256 dist/PubMan-${{ steps.calculate_version.outputs.version }}.AppImage | awk '{print $1}')" >> $GITHUB_OUTPUT

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.version != ''
    steps:
      - name: Checkout homebrew-pubman
        uses: actions/checkout@v4
        with:
          repository: DrawnToDigital/homebrew-pubman
          path: homebrew-pubman
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Update Cask
        shell: bash
        run: |
          # Load values from artifacts
          version=${{ needs.release.outputs.version }}
          shaosxarm=${{ needs.release.outputs.shaosxarm }}
          shaosxintel=${{ needs.release.outputs.shaosxintel }}
          shalinux=${{ needs.release.outputs.shalinux }}

          cd homebrew-pubman

          # Update version and SHA256
          sed -i "s|version \".*\"|version \"$version\"|" Casks/pubman.rb
          sed -i "s|sha256 arm:   \".*\"|sha256 arm:   \"$shaosxarm\"|" Casks/pubman.rb
          sed -i "s|intel: \".*\"|intel: \"$shaosxintel\"|" Casks/pubman.rb
          sed -i "s|version \".*\"|version \"$version\"|" Formula/pubman-linux.rb
          sed -i "s|sha256 \".*\"|sha256 \"$shalinux\"|" Formula/pubman-linux.rb

          # Commit and push changes
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Casks/pubman.rb Formula/pubman-linux.rb
          git commit -m "Update cask to version $version"
          git push